diff --git a/config/BuildSystem/config/packages/SuperLU.py b/config/BuildSystem/config/packages/SuperLU.py
index 217743097e..239ac7806d 100644
--- a/config/BuildSystem/config/packages/SuperLU.py
+++ b/config/BuildSystem/config/packages/SuperLU.py
@@ -52,5 +52,12 @@ class Configure(config.package.CMakePackage):
       if item.find('CMAKE_C_FLAGS') >= 0 or item.find('CMAKE_CXX_FLAGS') >= 0:
         args[place]=item[:-1]+' '+mangledef+'"'
 
+    mpicc = self.framework.getMakeMacro('MPICC_SHOW')
+    mpicxx = self.framework.getMakeMacro('MPICXX_SHOW')
+    if mpicc and mpicxx:
+        args = self.rmArgsStartsWith(args,['-DCMAKE_CXX_COMPILER','-DCMAKE_C_COMPILER'])
+        args.append('-DCMAKE_C_COMPILER="'+mpicc.split(None, 1)[0]+'"')
+        args.append('-DCMAKE_CXX_COMPILER="'+mpicxx.split(None, 1)[0]+'"')
+
     return args
 
diff --git a/config/BuildSystem/config/packages/metis.py b/config/BuildSystem/config/packages/metis.py
index b2d66ab23f..08219fb317 100644
--- a/config/BuildSystem/config/packages/metis.py
+++ b/config/BuildSystem/config/packages/metis.py
@@ -41,6 +41,12 @@ class Configure(config.package.CMakePackage):
     if self.framework.argDB['download-metis-use-doubleprecision']:
       args.append('-DMETIS_USE_DOUBLEPRECISION=1')
     args.append('-DMATH_LIB="'+self.libraries.toStringNoDupes(self.mathlib.lib)+'"')
+    mpicc = self.framework.getMakeMacro('MPICC_SHOW')
+    mpicxx = self.framework.getMakeMacro('MPICXX_SHOW')
+    if mpicc and mpicxx:
+        args = self.rmArgsStartsWith(args,['-DCMAKE_CXX_COMPILER','-DCMAKE_C_COMPILER'])
+        args.append('-DCMAKE_C_COMPILER="'+mpicc.split(None, 1)[0]+'"')
+        args.append('-DCMAKE_CXX_COMPILER="'+mpicxx.split(None, 1)[0]+'"')
     return args
 
   def configureLibrary(self):
diff --git a/config/BuildSystem/config/packages/mmg.py b/config/BuildSystem/config/packages/mmg.py
index dc8ce9817f..4ba1aec2f6 100644
--- a/config/BuildSystem/config/packages/mmg.py
+++ b/config/BuildSystem/config/packages/mmg.py
@@ -28,4 +28,10 @@ class Configure(config.package.CMakePackage):
     args.append('-DUSE_VTK=OFF')
     args.append('-DUSE_POINTMAP=ON')
     args.append('-DSCOTCH_DIR:STRING="'+self.ptscotch.directory+'"')
+    mpicc = self.framework.getMakeMacro('MPICC_SHOW')
+    mpicxx = self.framework.getMakeMacro('MPICXX_SHOW')
+    if mpicc and mpicxx:
+        args = self.rmArgsStartsWith(args,['-DCMAKE_CXX_COMPILER','-DCMAKE_C_COMPILER'])
+        args.append('-DCMAKE_C_COMPILER="'+mpicc.split(None, 1)[0]+'"')
+        args.append('-DCMAKE_CXX_COMPILER="'+mpicxx.split(None, 1)[0]+'"')
     return args
diff --git a/src/mat/impls/aij/mpi/mumps/mumps.c b/src/mat/impls/aij/mpi/mumps/mumps.c
index 8dc6b3fa3e..6d2f3f9bb2 100644
--- a/src/mat/impls/aij/mpi/mumps/mumps.c
+++ b/src/mat/impls/aij/mpi/mumps/mumps.c
@@ -1776,11 +1776,7 @@ PetscErrorCode PetscSetMUMPSFromOptions(Mat F, Mat A)
      see https://github.com/pmodels/mpich/issues/5589. This bug was fixed by https://github.com/pmodels/mpich/pull/5590.
      In short, we could not use distributed RHS with MPICH until v4.0b1.
    */
-#if PETSC_PKG_MUMPS_VERSION_LT(5,3,0) || (defined(PETSC_HAVE_MPICH_NUMVERSION) && (PETSC_HAVE_MPICH_NUMVERSION < 40000101))
   mumps->ICNTL20 = 0;  /* Centralized dense RHS*/
-#else
-  mumps->ICNTL20 = 10; /* Distributed dense RHS*/
-#endif
   PetscCall(PetscOptionsMUMPSInt("-mat_mumps_icntl_20","ICNTL(20): give mumps centralized (0) or distributed (10) dense right-hand sides","None",mumps->ICNTL20,&mumps->ICNTL20,&flg));
   PetscCheckFalse(flg && mumps->ICNTL20 != 10 && mumps->ICNTL20 != 0,PETSC_COMM_SELF,PETSC_ERR_SUP,"ICNTL(20)=%d is not supported by the PETSc/MUMPS interface. Allowed values are 0, 10",(int)mumps->ICNTL20);
 #if PETSC_PKG_MUMPS_VERSION_LT(5,3,0)
diff --git a/config/BuildSystem/config/packages/PTScotch.py b/config/BuildSystem/config/packages/PTScotch.py
index 5a46e581fd2..bc7535eb449 100644
--- a/config/BuildSystem/config/packages/PTScotch.py
+++ b/config/BuildSystem/config/packages/PTScotch.py
@@ -32,12 +32,16 @@ class Configure(config.package.Package):
     self.odeps          = [self.pthread,self.zlib]
     return
 
+  def configureLibrary(self):
+    if not self.bison.haveBison3plus:
+      self.download = self.download_mingw
+    config.package.Package.configureLibrary(self)
+
   def Install(self):
     import os
 
     self.programs.getExecutable('flex', getFullPath = 1)
     if not hasattr(self.programs, 'flex'): raise RuntimeError('PTScotch needs flex installed')
-    if not self.bison.haveBison3plus: raise RuntimeError('PTScotch needs Bison version 3.0 or above, use --download-bison')
 
     self.log.write('Creating PTScotch '+os.path.join(os.path.join(self.packageDir,'src'),'Makefile.inc')+'\n')
 
@@ -94,7 +98,7 @@ class Configure(config.package.Package):
     g.write('MKDIR    = '+self.programs.mkdir+'\n')
     g.write('MV       = '+self.programs.mv+'\n')
     g.write('RANLIB   = '+self.setCompilers.RANLIB+'\n')
-    if self.setCompilers.isMINGW(self.framework.getCompiler(), self.log):
+    if self.setCompilers.isMINGW(self.framework.getCompiler(), self.log) or not self.bison.haveBison3plus:
       g.write('LEX      = '+self.programs.flex+'\n')
       g.write('YACC     = '+getattr(self.bison,self.bison.executablename)+' -y\n')
     else:
